# 无敌状态可视化节点：根据角色是否可接收伤害切换动画（如闪烁或透明效果）
class_name VisualInvulnerability  # 定义类名，可在场景中作为无敌状态可视化控制器
extends Node  # 继承自基础节点类


# -------------------- 导出变量（编辑器可视化配置） --------------------
## 资源节点：存储伤害资源（DamageResource）
@export var resource_node:ResourceNode  
## 动画播放器：用于控制无敌状态动画播放
@export var animation_player:AnimationPlayer  
## 无敌状态动画名称：当角色不可接收伤害时播放
@export var animation_invulnerable:StringName  
## 正常状态动画名称：当角色可接收伤害时播放
@export var animation_normal:StringName  


# -------------------- 成员变量（运行时状态） --------------------
var damage_resource:DamageResource  # 伤害资源（用于获取角色是否可接收伤害状态）


# -------------------- 生命周期方法（节点初始化与信号连接） --------------------
func _ready()->void:
	if resource_node == null:
		Log.entry("[" + get_script().resource_path.get_file().get_basename() + ".gd] " + "[" + str(get_stack()[0]["line"] if get_stack()[0].size() > 0 else -1) + "] " + "VisualInvulnerability: 资源节点（resource_node）未配置", LogManager.LogLevel.ERROR)
		return
	if animation_player == null:
		Log.entry("[" + get_script().resource_path.get_file().get_basename() + ".gd] " + "[" + str(get_stack()[0]["line"] if get_stack()[0].size() > 0 else -1) + "] " + "VisualInvulnerability: 动画播放器（animation_player）未配置", LogManager.LogLevel.ERROR)
		return
	if animation_invulnerable == "" || animation_normal == "":
		Log.entry("[" + get_script().resource_path.get_file().get_basename() + ".gd] " + "[" + str(get_stack()[0]["line"] if get_stack()[0].size() > 0 else -1) + "] " + "VisualInvulnerability: 无敌状态动画名称(animation_invulnerable)或者正常状态动画名称(animation_normal) 未配置", LogManager.LogLevel.ERROR)
		return
	# 获取伤害资源（必须配置，否则无法获取无敌状态）
	damage_resource = resource_node.get_resource("damage")
	if damage_resource == null:
		Log.entry("[" + get_script().resource_path.get_file().get_basename() + ".gd] " + "[" + str(get_stack()[0]["line"] if get_stack()[0].size() > 0 else -1) + "] " + "VisualInvulnerability: 伤害资源（damage）未配置，无敌动画逻辑失效", LogManager.LogLevel.ERROR)
		return
	
	# 监听角色是否可接收伤害状态变化（切换动画）
	damage_resource.can_receive_changed.connect(_set_invulnerability_animation)
	
	# 配合对象池使用（标记节点准备完成）
	request_ready()


# -------------------- 状态变更回调（切换无敌/正常动画） --------------------
## @brief 当角色可接收伤害状态变更时，切换对应的动画播放
func _set_invulnerability_animation()->void:
	if damage_resource == null || animation_player == null || !animation_player.is_inside_tree():
		Log.entry("[" + get_script().resource_path.get_file().get_basename() + ".gd] " + "[" + str(get_stack()[0]["line"] if get_stack()[0].size() > 0 else -1) + "] " + "VisualInvulnerability: 动画播放器（animation_player）未配置或已销毁", LogManager.LogLevel.ERROR)
		return  # 资源未初始化时跳过
	
	if !damage_resource.can_receive_damage:
		# 不可接收伤害时播放无敌动画
		animation_player.play(animation_invulnerable)
	else:
		# 可接收伤害时播放正常动画
		animation_player.play(animation_normal)
